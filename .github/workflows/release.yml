name: Create osCASH.me Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Extract Version from Tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: '34'
        build-tools: '34.0.0'
        
    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
        
    - name: Grant Execute Permission to Gradlew
      run: chmod +x gradlew
      
    - name: Build Release APK
      run: |
        ./gradlew assembleRelease --stacktrace --no-daemon \
          -Dorg.gradle.dependency.verification=lenient \
          --continue
          
    - name: Find APK File
      id: find_apk
      run: |
        APK_FILE=$(find . -name "*-apk-release.apk" -o -name "*release*.apk" | head -n)
        if [ -z "$APK_FILE" ]; then
          echo "Error: No APK file found"
          exit 1
        fi
        echo "apk_file=$APK_FILE" >> $GITHUB_OUTPUT
        echo "Found APK: $APK_FILE"
        
    - name: Rename APK
      run: |
        cp "${{ steps.find_apk.outputs.apk_file }}" "osCASH.me-${{ steps.version.outputs.version }}.apk"
        ls -la *.apk
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # osCASH.me v${{ steps.version.outputs.version }}
        
        ## 🔒 Privacy Messenger mit eUSD & MOB Wallet
        
        ### ✨ Features
        - **End-to-End Verschlüsselung** für alle Nachrichten
        - **MobileCoin Integration** - eUSD & MOB Wallet
        - **Tor Support** für maximale Anonymität  
        - **Signal Protocol** - bewährte Sicherheit
        - **Open Source** - community-auditiert
        
        ### 📱 Installation
        1. APK herunterladen: `osCASH.me-v${{ steps.version.outputs.version }}.apk`
        2. "Unbekannte Quellen" in Android-Einstellungen erlauben
        3. APK installieren und starten
        4. Sichere Backup-Phrase notieren
        
        ### 🛡️ Sicherheitshinweise
        - **Nur von GitHub herunterladen** - niemals von anderen Quellen
        - **SHA256 Checksumme prüfen** (siehe unten)
        - **Backup-Phrase sicher aufbewahren** - ohne sie sind Wallets unwiederbringlich verloren
        - **Updates nur von offiziellen Releases** installieren
        
        ### 🔗 Verifikation
        ```bash
        # SHA256 Checksumme prüfen
        sha256sum osCASH.me-v${{ steps.version.outputs.version }}.apk
        
        # Signatur verifizieren (falls verfügbar)
        gpg --verify osCASH.me-v${{ steps.version.outputs.version }}.apk.sig
        ```
        
        ### 📞 Support & Community
        - **Issues**: [GitHub Issues](https://github.com/osCASHeme/android/issues)
        - **Discussions**: [GitHub Discussions](https://github.com/osCASHeme/android/discussions)
        - **DAO**: [recode.at Governance](https://github.com/recodeat/dao-governance)
        - **Email**: github@recode.at
        
        ---
        
        **Wichtig**: Dies ist eine Alpha-Version für Early Adopters. Verwende sie nicht für kritische Kommunikation oder groşe Geldbeträge.
        
        *Verbunden, um frei zu SEIN* 🔒💰
        EOF
        
        echo "Generated release notes for v${{ steps.version.outputs.version }}"
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: 'osCASH.me ${{ steps.version.outputs.tag }} - First release of privacy messenger'
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        
    - name: Upload Release APK to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: osCASH.me-${{ steps.version.outputs.version }}.apk
        asset_name: osCASH.me-${{ steps.version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive